// <auto-generated />
using System;
using Infra.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infra.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241028150732_UsuarioIdAutoCreation")]
    partial class UsuarioIdAutoCreation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Core.Entities.Dependente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)");

                    b.Property<DateOnly>("DataNascimento")
                        .HasColumnType("date");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Sexo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Sobrenome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Dependentes", (string)null);
                });

            modelBuilder.Entity("Core.Entities.DoseRecomendada", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("IdadeParaAplicacaoEmMeses")
                        .HasColumnType("integer");

                    b.Property<int>("Numero")
                        .HasColumnType("integer");

                    b.Property<Guid>("VacinaId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("VacinaId");

                    b.ToTable("DosesRecomendadas", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("0abe9477-534c-4c46-89bb-fc4a6f96a7d7"),
                            IdadeParaAplicacaoEmMeses = 0,
                            Numero = 1,
                            VacinaId = new Guid("e8e46de4-7fd0-40e6-b15c-e3253489ac29")
                        },
                        new
                        {
                            Id = new Guid("1463fbd8-96d7-4437-a75d-252298838980"),
                            IdadeParaAplicacaoEmMeses = 0,
                            Numero = 1,
                            VacinaId = new Guid("a2435507-b514-480d-b59d-ec0aad71a41c")
                        },
                        new
                        {
                            Id = new Guid("86db4ea1-ffc5-4f02-9b50-a2c5e84e8c50"),
                            IdadeParaAplicacaoEmMeses = 1,
                            Numero = 2,
                            VacinaId = new Guid("a2435507-b514-480d-b59d-ec0aad71a41c")
                        },
                        new
                        {
                            Id = new Guid("9f25dde5-bb26-4e76-8b65-a41571b3d4a2"),
                            IdadeParaAplicacaoEmMeses = 6,
                            Numero = 3,
                            VacinaId = new Guid("a2435507-b514-480d-b59d-ec0aad71a41c")
                        },
                        new
                        {
                            Id = new Guid("57e63ed8-4d21-4114-aca3-5e90fa00e0f6"),
                            IdadeParaAplicacaoEmMeses = 2,
                            Numero = 1,
                            VacinaId = new Guid("a5370edd-661d-40f5-8755-e880c2da21f9")
                        },
                        new
                        {
                            Id = new Guid("777c1a8b-31a6-4621-9225-47f24afd0cea"),
                            IdadeParaAplicacaoEmMeses = 4,
                            Numero = 2,
                            VacinaId = new Guid("a5370edd-661d-40f5-8755-e880c2da21f9")
                        },
                        new
                        {
                            Id = new Guid("ba6cf18d-184c-4184-b6a0-15c2ba852b27"),
                            IdadeParaAplicacaoEmMeses = 6,
                            Numero = 3,
                            VacinaId = new Guid("a5370edd-661d-40f5-8755-e880c2da21f9")
                        },
                        new
                        {
                            Id = new Guid("cc30ed8b-d13f-4c99-9897-4c62432d5443"),
                            IdadeParaAplicacaoEmMeses = 2,
                            Numero = 1,
                            VacinaId = new Guid("3dcd36f5-1ff4-4847-822a-6d2b53cc4c81")
                        },
                        new
                        {
                            Id = new Guid("9442678b-169e-41cc-9236-6f5bd85ff367"),
                            IdadeParaAplicacaoEmMeses = 4,
                            Numero = 2,
                            VacinaId = new Guid("3dcd36f5-1ff4-4847-822a-6d2b53cc4c81")
                        },
                        new
                        {
                            Id = new Guid("237faa1d-10dd-4c78-b048-af24acbfe8ab"),
                            IdadeParaAplicacaoEmMeses = 2,
                            Numero = 1,
                            VacinaId = new Guid("2543210a-c000-48b6-9fe8-7c36d1b2a34a")
                        },
                        new
                        {
                            Id = new Guid("686e01bb-bc64-4ea3-88c3-57d7df493972"),
                            IdadeParaAplicacaoEmMeses = 4,
                            Numero = 2,
                            VacinaId = new Guid("2543210a-c000-48b6-9fe8-7c36d1b2a34a")
                        },
                        new
                        {
                            Id = new Guid("e5d83861-32b3-48b3-91db-2b7475f9d523"),
                            IdadeParaAplicacaoEmMeses = 12,
                            Numero = 3,
                            VacinaId = new Guid("2543210a-c000-48b6-9fe8-7c36d1b2a34a")
                        },
                        new
                        {
                            Id = new Guid("07353eed-365b-4c5e-a326-e28a891ae2ae"),
                            IdadeParaAplicacaoEmMeses = 3,
                            Numero = 1,
                            VacinaId = new Guid("260ef8b5-eff4-48af-960b-8fbffbda6672")
                        },
                        new
                        {
                            Id = new Guid("cc170eab-1e9f-444e-9993-80e50ee03d8e"),
                            IdadeParaAplicacaoEmMeses = 5,
                            Numero = 2,
                            VacinaId = new Guid("260ef8b5-eff4-48af-960b-8fbffbda6672")
                        },
                        new
                        {
                            Id = new Guid("6f4f9ab9-64cd-471f-b728-c16f3665f200"),
                            IdadeParaAplicacaoEmMeses = 9,
                            Numero = 1,
                            VacinaId = new Guid("52d1f642-d6ce-4fb0-9565-5906cce1e887")
                        },
                        new
                        {
                            Id = new Guid("88c85335-0829-41ca-91a7-325a12de3244"),
                            IdadeParaAplicacaoEmMeses = 12,
                            Numero = 1,
                            VacinaId = new Guid("b80e5206-6f6e-4c51-bf9b-8c7a00df2322")
                        },
                        new
                        {
                            Id = new Guid("3b16a058-fa56-4596-aa0d-bfc933c1d434"),
                            IdadeParaAplicacaoEmMeses = 15,
                            Numero = 2,
                            VacinaId = new Guid("b80e5206-6f6e-4c51-bf9b-8c7a00df2322")
                        },
                        new
                        {
                            Id = new Guid("184eceaa-388f-4185-9617-a3f3eb68e7da"),
                            IdadeParaAplicacaoEmMeses = 12,
                            Numero = 1,
                            VacinaId = new Guid("7bc3e006-a5ba-4586-8122-26cd50851cd1")
                        },
                        new
                        {
                            Id = new Guid("78c5ec89-d6a8-4a82-a1f6-bc737e2a8a14"),
                            IdadeParaAplicacaoEmMeses = 15,
                            Numero = 1,
                            VacinaId = new Guid("e7ff343e-b464-42a1-95a0-f8473c8dbb38")
                        },
                        new
                        {
                            Id = new Guid("6620b1db-9590-4df5-932b-caf47d694b35"),
                            IdadeParaAplicacaoEmMeses = 15,
                            Numero = 1,
                            VacinaId = new Guid("f0deceee-b30c-454a-afe8-23be173aedae")
                        },
                        new
                        {
                            Id = new Guid("16a8bb4a-4372-4159-96e2-caed5df65a2d"),
                            IdadeParaAplicacaoEmMeses = 48,
                            Numero = 2,
                            VacinaId = new Guid("f0deceee-b30c-454a-afe8-23be173aedae")
                        },
                        new
                        {
                            Id = new Guid("6efa1cac-7adc-4dde-a849-769c39d75ae2"),
                            IdadeParaAplicacaoEmMeses = 144,
                            Numero = 3,
                            VacinaId = new Guid("f0deceee-b30c-454a-afe8-23be173aedae")
                        },
                        new
                        {
                            Id = new Guid("06e7a683-d4b9-4f22-9a7c-30b91b12fa5a"),
                            IdadeParaAplicacaoEmMeses = 15,
                            Numero = 1,
                            VacinaId = new Guid("78e73a94-dbfd-4f65-bb67-3aeac22e4b97")
                        });
                });

            modelBuilder.Entity("Core.Entities.RegistroVacina", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("DataAplicacao")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("DataProximaDose")
                        .HasColumnType("date");

                    b.Property<Guid>("DependenteId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DoseRecomendadaId")
                        .HasColumnType("uuid");

                    b.Property<string>("Laboratorio")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Lote")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("NomeAplicador")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("UnidadeSaude")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<Guid>("VacinaId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DependenteId");

                    b.HasIndex("DoseRecomendadaId");

                    b.HasIndex("VacinaId");

                    b.ToTable("RegistrosVacinas", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Usuario", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)");

                    b.Property<DateOnly>("DataNascimento")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Sexo")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Sobrenome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique();

                    b.ToTable("Usuarios", (string)null);
                });

            modelBuilder.Entity("Core.Entities.UsuarioDependente", b =>
                {
                    b.Property<string>("UsuarioId")
                        .HasColumnType("text");

                    b.Property<Guid>("DependenteId")
                        .HasColumnType("uuid");

                    b.HasKey("UsuarioId", "DependenteId");

                    b.HasIndex("DependenteId");

                    b.ToTable("UsuariosDependentes", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Vacina", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Descricao")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.ToTable("Vacinas", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("e8e46de4-7fd0-40e6-b15c-e3253489ac29"),
                            Descricao = "Protege contra formas graves de tuberculose.",
                            Nome = "BCG"
                        },
                        new
                        {
                            Id = new Guid("a2435507-b514-480d-b59d-ec0aad71a41c"),
                            Descricao = "Protege contra hepatite B.",
                            Nome = "Hepatite B"
                        },
                        new
                        {
                            Id = new Guid("a5370edd-661d-40f5-8755-e880c2da21f9"),
                            Descricao = "Protege contra difteria, tétano, coqueluche, hepatite B e Haemophilus influenzae tipo B.",
                            Nome = "Pentavalente"
                        },
                        new
                        {
                            Id = new Guid("3dcd36f5-1ff4-4847-822a-6d2b53cc4c81"),
                            Descricao = "Protege contra gastroenterite causada por rotavírus.",
                            Nome = "Rotavírus"
                        },
                        new
                        {
                            Id = new Guid("2543210a-c000-48b6-9fe8-7c36d1b2a34a"),
                            Descricao = "Protege contra doenças causadas por pneumococo, como pneumonia, otite e meningite.",
                            Nome = "Pneumocócica 10-valente"
                        },
                        new
                        {
                            Id = new Guid("260ef8b5-eff4-48af-960b-8fbffbda6672"),
                            Descricao = "Protege contra meningite causada pelo meningococo C.",
                            Nome = "Meningocócica C"
                        },
                        new
                        {
                            Id = new Guid("52d1f642-d6ce-4fb0-9565-5906cce1e887"),
                            Descricao = "Protege contra a febre amarela.",
                            Nome = "Febre Amarela"
                        },
                        new
                        {
                            Id = new Guid("b80e5206-6f6e-4c51-bf9b-8c7a00df2322"),
                            Descricao = "Protege contra sarampo, caxumba e rubéola.",
                            Nome = "Tríplice Viral (SCR)"
                        },
                        new
                        {
                            Id = new Guid("7bc3e006-a5ba-4586-8122-26cd50851cd1"),
                            Descricao = "Protege contra hepatite A.",
                            Nome = "Hepatite A"
                        },
                        new
                        {
                            Id = new Guid("e7ff343e-b464-42a1-95a0-f8473c8dbb38"),
                            Descricao = "Protege contra sarampo, caxumba, rubéola e varicela.",
                            Nome = "Tetraviral"
                        },
                        new
                        {
                            Id = new Guid("f0deceee-b30c-454a-afe8-23be173aedae"),
                            Descricao = "Protege contra difteria, tétano e coqueluche.",
                            Nome = "DTP"
                        },
                        new
                        {
                            Id = new Guid("78e73a94-dbfd-4f65-bb67-3aeac22e4b97"),
                            Descricao = "Protege contra a varicela (catapora).",
                            Nome = "Varicela"
                        });
                });

            modelBuilder.Entity("Infra.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Core.Entities.DoseRecomendada", b =>
                {
                    b.HasOne("Core.Entities.Vacina", "Vacina")
                        .WithMany("DosesRecomendadas")
                        .HasForeignKey("VacinaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vacina");
                });

            modelBuilder.Entity("Core.Entities.RegistroVacina", b =>
                {
                    b.HasOne("Core.Entities.Dependente", "Dependente")
                        .WithMany("RegistrosVacinas")
                        .HasForeignKey("DependenteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.DoseRecomendada", "DoseRecomendada")
                        .WithMany()
                        .HasForeignKey("DoseRecomendadaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.Vacina", "Vacina")
                        .WithMany()
                        .HasForeignKey("VacinaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dependente");

                    b.Navigation("DoseRecomendada");

                    b.Navigation("Vacina");
                });

            modelBuilder.Entity("Core.Entities.Usuario", b =>
                {
                    b.HasOne("Infra.Identity.ApplicationUser", null)
                        .WithOne("Usuario")
                        .HasForeignKey("Core.Entities.Usuario", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.UsuarioDependente", b =>
                {
                    b.HasOne("Core.Entities.Dependente", "Dependente")
                        .WithMany("UsuarioDependente")
                        .HasForeignKey("DependenteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Usuario", "Usuario")
                        .WithMany("UsuarioDependente")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dependente");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Infra.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Infra.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infra.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Infra.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.Dependente", b =>
                {
                    b.Navigation("RegistrosVacinas");

                    b.Navigation("UsuarioDependente");
                });

            modelBuilder.Entity("Core.Entities.Usuario", b =>
                {
                    b.Navigation("UsuarioDependente");
                });

            modelBuilder.Entity("Core.Entities.Vacina", b =>
                {
                    b.Navigation("DosesRecomendadas");
                });

            modelBuilder.Entity("Infra.Identity.ApplicationUser", b =>
                {
                    b.Navigation("Usuario")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
